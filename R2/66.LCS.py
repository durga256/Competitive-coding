S1 = 'AGGTAB'; S2 = 'GXTXAYB'
S1 = 'RTCNBKHNRHDIOEKOSLMJCOKPIDBBARHDQHPJOIHSFTMSAAAFSDQCTJDOKILGTCPRSFRCNJIMPPNDSNNQCJOQKGPKCJIRSBDLSRMLKCQEIPMLLLCDHSIDLHETBOJDIJHFOAAFMFNCTAPKEDABQNECJEQDLQEIKGEGGNBEIEJFJFRDNERMFKFLIDNRLKOEHRIPDJIHGSPKFOFHFGCCEGTIFOJMNNTCEJJMBSDABMGSAHBORCAILESKMIPNLPIQMSFRTOTFBBQHORQEELSBKQREAKPECCLAIJKBKBRTHNMFSTCAKJHLSKCMGTBMRSGHARPGBJTKHJGORSHMJBJMHHJAGLFTKNHBTGPKFILOADCMKRDKDSHBEGIJLPDLBRARFIQGFCIHLFQBCISTQMNGRQITJBDNPREJIMRKCRFQHLILMTFTNTPLALJGKLJNIKSDBGSSADIKNQHDJPCCCIIPPGHGTFBPDHQMHMPFGDAFFMDIMDKPOSHQSCTOOCIHNIJEIEQMICJBCDBAKDGPBGFMKFDDHCMEBCNOABBHIPPGIGORTQMCJHLA'
S2 = 'SGRFSJDDQIEQQDKSLGGHQQQEGRKQDJNALRPMOEHECGSMMHQNQHSFORBBMGONKIDTBDHMLGSDGIHDPERMFPLBBOTEEMGEERCTHKTMSTSIEHTJKHGCCJBISOIEDSJTFDAGSBFKHIBGJSLGQOQQEKEFJFHHEMOISSTNNFQMRDCTFRNOOPFODEBPFQTDQPPAPHBIJEQTRPENHRCIHOPMSJSNGOKJTODTPNEDKNNOOJNJAJHJABRFKNJQBPLJMRCMHASJPRTLRDEOANCFMKKLCCQACDCGQAEFKFJEEHSQRIBCGCNQFIEETKFNELLSGIREBGMCOLGKDRELCPSSIMCNMRKSEKOHHIRGTCTQFBHJHNNKRADCTFECGNJJJBTCSBRTFKKNMKFJMIBDPKLJKLGLJEBQMGGHABDKTEFLANFOLKGSDMKLBSMDERSMBDESBOARMLEAESBTDIRTGKQECDCDPNABPITCIQBSRMHBJSCBBFTFHJMEQNMLIDPGGEMQRREOFNOCPQBFMNKBHLQGJBGLMDDNALEAJDLBBFNDRAEIFF'

dp = []
for i in range(len(S1)+1):
    dp.append([-1]*(len(S2)+1))


def lcs(s1, s2, n, m):
    if n == 0 or m == 0:
        return 0
    
    if dp[n][m] != -1:
        return dp[n][m]
    
    if s1[n-1] == s2[m-1]:
        dp[n][m] = 1+lcs(s1,s2,n-1,m-1)
        return dp[n][m]
    else:
        dp[n][m] = max(lcs(s1,s2,n-1,m), lcs(s1, s2, n, m-1))
        return dp[n][m]
    
print(lcs(S1, S2, len(S1), len(S2)))

#Iterative solution - apparently recursion + memoization is not enough

def lcs(self,m,n,X,Y):
    L = [[None]*(n+1) for i in range(m+1)]

    # Following steps build L[m+1][n+1] in bottom up fashion
    # Note: L[i][j] contains length of LCS of X[0..i-1]
    # and Y[0..j-1]
    for i in range(m+1):
        for j in range(n+1):
            if i == 0 or j == 0:
                L[i][j] = 0
            elif X[i-1] == Y[j-1]:
                L[i][j] = L[i-1][j-1]+1
            else:
                L[i][j] = max(L[i-1][j], L[i][j-1])
    
    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1]
    return L[m][n]